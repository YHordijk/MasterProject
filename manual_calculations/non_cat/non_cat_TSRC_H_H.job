#!/bin/sh

#======
ready() 
#======
{

if test ! -z "$SCM_RESULTDIR" -a ! -z "$JOBNAME"
then

#  special case to make sure results from chained jobs are copied back, sub jobs have path in JOBNAME
   AAA=`dirname "$JOBNAME"`
   JOBNAME=`basename "$JOBNAME"`
   if [ "$AAA" != "." ]; then
      SCM_RESULTDIR=$SCM_RESULTDIR/$AAA
   fi

    # -------------------------------------------
    # copy any files produced to result directory
    # -------------------------------------------

    for n in 13 21 41 10 11 15
    do
        cp -f -p "TAPE$n" "$SCM_RESULTDIR/$JOBNAME.t$n" 2>/dev/null
        rm -f "TAPE$n"
    done

    cp -f -p RUNKF "$SCM_RESULTDIR/$JOBNAME.runkf" 2>/dev/null
    cp -f -p COSKF "$SCM_RESULTDIR/$JOBNAME.coskf" 2>/dev/null
    cp -f -p CRSKF "$SCM_RESULTDIR/$JOBNAME.crskf" 2>/dev/null
    cp -f -p QUILDKF "$SCM_RESULTDIR/$JOBNAME.qkf" 2>/dev/null
    cp -f -p quildjob.qkf "$SCM_RESULTDIR/$JOBNAME.qkf" 2>/dev/null
    rm -f  QUILDKF quildjob.qkf COSKF CRSKF RUNKF

    if test ! -d "$SCM_RESULTDIR/$JOBNAME.results"
    then
        mkdir "$SCM_RESULTDIR/$JOBNAME.results"
    fi
    if test -d "$SCM_RESULTDIR/$JOBNAME.results"
    then
        for n in 13 21 41 10 11 15
        do
            cp -f -p "TAPE$n" "$SCM_RESULTDIR/$JOBNAME.t$n" 2>/dev/null
            rm -f "TAPE$n"
        done
        touch thisfileshouldbeignored
        cp -rf -p * "$SCM_RESULTDIR/$JOBNAME.results"
    else
        echo Problem copying result files to \"$SCM_RESULTDIR/$JOBNAME.results\"
    fi

    for f in "$SCM_RESULTDIR/$JOBNAME.results"/* thisfiledoesnotexist
    do
        if test -L "$f"; then
            rm -f "$f"
        fi
    done
    rm -f "$SCM_RESULTDIR/$JOBNAME.results"/thisfileshouldbeignored

    if test -z "$1"
    then
        echo "Job $JOBNAME has finished" >> "$SCM_RESULTDIR/$JOBNAME.logfile"
    else
        echo "Job $JOBNAME: $1" >> "$SCM_RESULTDIR/$JOBNAME.logfile"
    fi
    cd "$OWD" 2>/dev/null
    rm -rf "$SCM_JOBDIR"
    if test -z "$SCM_NOREADY"; then
        echo "# status: ready" >> "$SCM_RESULTDIR/$JOBNAME.pid"
#       densf runs from AMSview remove the line above, for that reason an extra NOP line is needed
        DUMMY=blurb
    fi
fi
}


#-----------------------------------------
# keep track of original working directory
#-----------------------------------------

OWD="`pwd`"
export OWD

# -------------------------------------------------
# insert prolog command as defined in AMSjobs queue
# -------------------------------------------------

# <<PROLOG>>

# ---------------------------------------------------
# execute arguments (possibly to set environment etc)
# ---------------------------------------------------

if test ! -z "$1"
then
    if test "$1" != "export NSCM=" -a "$1" != "NSCM= ; export NSCM"; then
       eval $1
    fi
fi

# ---------------
# name of the job
# ---------------

JOBNAME=`basename "$0" .job`
export JOBNAME

# -----------------------------------------------------------------------------------
# on a batch system, the start.cmd will replace the next line to set JOBNAME properly
# since the batch system may make a copy of the job script
# -----------------------------------------------------------------------------------

JOBNAME="non_cat_TSRC_H_H"
export JOBNAME


# -------------------------------------------------
# determine DIRN: full path of the script directory
# -------------------------------------------------

DN="`dirname "$0"`"
case "$DN" in
/*)
DIRN="$DN"
;;
?:*)
DIRN="$DN"
;;
*)
DIRN="`pwd`/$DN"
;;
esac

# --------------------------------------------------------------------------------
# on a batch system, the start.cmd will replace the next line to set DIRN properly
# since the batch system may make a copy of the job script
# --------------------------------------------------------------------------------

DIRN="D:/Users/Yuman/Desktop/MasterProject/manual_calculations/non_cat"


# ------------------------------------------------------------------------------------
# set SCM_RESULTDIR to DIRN, so results end up in the full path as required by ADFJOBS
# ------------------------------------------------------------------------------------

SCM_RESULTDIR="$DIRN"
export SCM_RESULTDIR

#----------------------------
# for AMS, set AMS_RESULTSDIR
#----------------------------

AMS_RESULTSDIR="$SCM_RESULTDIR/$JOBNAME.results"
export AMS_RESULTSDIR
rm -rf "$AMS_RESULTSDIR"
mkdir -p "$AMS_RESULTSDIR"
unset AMS_SWITCH_LOGFILE_AND_STDOUT

# ----------------------------------
# pass the location of the info file
# ----------------------------------

SCM_INFOFILE="$SCM_RESULTDIR/$JOBNAME.info"
export SCM_INFOFILE

# ---------------------------------
# update the status in the pid file
# ---------------------------------

echo "# pid: $$" >> "$SCM_RESULTDIR/$JOBNAME.pid"
echo "# status: running" >> "$SCM_RESULTDIR/$JOBNAME.pid"


# ---------------
# prepare logfile
# ---------------

if test -s "$SCM_RESULTDIR/$JOBNAME.logfile"
then
    cp "$SCM_RESULTDIR/$JOBNAME.logfile" "$SCM_RESULTDIR/$JOBNAME.logfile~"
fi
cat /dev/null > "$SCM_RESULTDIR/$JOBNAME.logfile"

SCM_LOGFILE="$SCM_RESULTDIR/$JOBNAME.logfile"
export SCM_LOGFILE





# ------------------------------------------------------------------
# within SCM_RESULTDIR, make a new empty directory just for this job
# ------------------------------------------------------------------

XX=0
SCM_JOBDIR="$SCM_RESULTDIR/tmp.$USER.$$.$XX.noindex"
while test -d "$SCM_JOBDIR" 
do
   XX=`expr $XX + 1`
   SCM_JOBDIR="$SCM_RESULTDIR/tmp.$USER.$$.$XX.noindex"
done
export SCM_JOBDIR
mkdir "$SCM_JOBDIR"
echo "# jobdir: localhost:$SCM_JOBDIR" >> "$SCM_INFOFILE"

if test ! -d "$SCM_JOBDIR"
then
    echo "Could not create temporary directory $SCM_JOBDIR" >> "$SCM_RESULTDIR/$JOBNAME.logfile"
    echo "# status: killed" >> "$SCM_RESULTDIR/$JOBNAME.pid"
    exit
fi

# -----------------------------------------------------
# nodeinfo may be needed, and keep backup of old output
# -----------------------------------------------------

if test -f nodeinfo 
then
    cp nodeinfo "$SCM_JOBDIR/nodeinfo"
fi
cd "$SCM_JOBDIR"

if test -s "$SCM_RESULTDIR/$JOBNAME.out"
then
    mv "$SCM_RESULTDIR/$JOBNAME.out" "$SCM_RESULTDIR/$JOBNAME.out~"
fi



# -------------------------------------------------------
# on normal or abnormal exits, clean up and update status
# -------------------------------------------------------

trap "ready \"abnormal exit (signal 1)\"; exit"  1 
trap "ready \"abnormal exit (signal 2)\"; exit"  2 
trap "ready \"abnormal exit (signal 3)\"; exit"  3
trap "ready \"abnormal exit (signal 15)\"; exit" 15

# -------------------------------------
# define easy vars for output and error
# -------------------------------------

SCM_OUT="$SCM_RESULTDIR/$JOBNAME.out"
export SCM_OUT
SCM_ERR="$SCM_RESULTDIR/$JOBNAME.err"
export SCM_ERR


# ----------------------
# execute the run script
# ----------------------

cat << \EORTHEJOB > job
#!/bin/sh

"$AMSBIN/ams" << eor

Task TransitionStateSearch
Properties
    NormalModes Yes
End
TransitionStateSearch
    ReactionCoordinate
        Distance 3 2 -1
    End
End
System
    Atoms
        C 0.81668 -0.234719 0.881975 
        C 0.816784 -0.234131 -0.477193 
        C -1.5316 -0.46998 -1.308576 
        H 0.856362 -1.163867 1.448593 
        C 0.738934 1.000635 1.660143 
        H -1.752243 -1.423246 -0.843669 
        H 0.865401 0.701495 -1.028794 
        H 0.9966215852527283 -1.138406537115949 -1.039637838098928 
        H -1.295721 -0.453222 -2.366756 
        H -1.934372 0.427296 -0.8548559999999999 
        H 0.7318284836693285 1.049729737954051 2.739003147722075 
        O 0.68714041 2.02130477 0.99384678 
    End
    BondOrders
         1 2 2.0
         1 4 1.0
         1 5 1.0
         2 7 1.0
         2 8 1.0
         3 6 1.0
         3 9 1.0
         3 10 1.0
         5 11 1.0
         5 12 2.0
    End
End

Engine ADF
    Basis
        Type TZ2P
        Core None
    End
    SpinPolarization 1.0
    XC
        GGA OLYP
    End
    Unrestricted Yes
EndEngine
eor



EORTHEJOB

chmod u+x job
./job >>"$SCM_RESULTDIR/$JOBNAME.out" 2>> "$SCM_RESULTDIR/$JOBNAME.err"
rm job

# <<EPILOG>>

ready


